generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  UNVERIFIED
  LOCKED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ServiceStatus {
  AVAILABLE
  UNAVAILABLE
  NO_LONGER_PROVIDED
}

enum UnitType {
  PORTION
  SERVING
  PIECE
  SLICE
  SET
  BOX
  TRAY
  PACK
  CUP
  BOTTLE
  CAN
  DISH
  BOWL
  GLASS
  JAR
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String
  name       String
  email      String     @unique
  phone      String?    @unique
  status     UserStatus @default(UNVERIFIED)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Provider   Provider[]
  Traveler   Traveler[]
}

model Provider {
  id             Int       @id
  description    String?
  logo_url       String?
  website_link   String?
  address        String?
  id_card        String    @unique
  province       String
  country        String
  establish_year Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user           User      @relation(fields: [id], references: [id])
  Services       Service[]
}

model Traveler {
  id         Int       @id
  gender     Gender?
  dob        DateTime?
  location   String?
  avatar_url String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [id], references: [id])
}

model ServiceType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Services    Service[]
}

model Service {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  location    String?
  rating      Float          @default(0)
  type_id     Int
  provider_id Int
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  Type        ServiceType    @relation(fields: [type_id], references: [id])
  Provider    Provider       @relation(fields: [provider_id], references: [id])
  Tags        ServiceOnTag[]
  Menus       Menu[]
  Tour        Tour[]
}

model ServiceTag {
  id         Int            @id @default(autoincrement())
  name       String         @unique
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  Services   ServiceOnTag[]
}

model ServiceOnTag {
  serviceId Int
  tagId     Int
  Service   Service    @relation(fields: [serviceId], references: [id])
  Tag       ServiceTag @relation(fields: [tagId], references: [id])

  @@id([serviceId, tagId]) // composite primary key
}

model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  cover_url   String?
  service_id  Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  Service     Service    @relation(fields: [service_id], references: [id])
  MenuItems   MenuItem[]
}

model MenuItem {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  image_url   String?
  price       Float
  unit        UnitType
  status      ServiceStatus @default(AVAILABLE)
  menu_id     Int
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Menu        Menu          @relation(fields: [menu_id], references: [id])
}

model Tour {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  service_price Float
  total_price   Float
  duration      Float // in hours
  status        ServiceStatus @default(AVAILABLE)
  service_id    Int
  tourguide_id  Int?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  Service       Service       @relation(fields: [service_id], references: [id])
  TourPlace     TourPlace[]
  TourGuide     TourGuide?    @relation(fields: [tourguide_id], references: [id])
}

model Place {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  image_url     String?
  address       String?
  opening_hours Json?
  entry_fee     Float?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  TourPlace     TourPlace[]
}

model TourPlace {
  tour_id     Int
  place_id    Int
  description String?
  start_time  DateTime?
  end_time    DateTime?
  Tour        Tour      @relation(fields: [tour_id], references: [id])
  Place       Place     @relation(fields: [place_id], references: [id])

  @@id([tour_id, place_id])
}

model TourGuide {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  description String?
  image_url   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Tour        Tour[]
}
